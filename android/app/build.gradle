plugins {
    id "com.android.application"
    id "com.google.gms.google-services" // FlutterFire Configuration
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin" // Flutter Gradle Plugin
}

// key.properties 파일을 불러오는 코드
def keyProperties = new Properties()

def keyPropertiesFile = rootProject.file("../key.properties")
if (keyPropertiesFile.exists()) {
    keyProperties.load(new FileInputStream(keyPropertiesFile))
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode") ?: "1"
def flutterVersionName = localProperties.getProperty("flutter.versionName") ?: "1.0"

android {
    namespace = "com.letelumiere.ffxiv" // 패키지 이름
    compileSdk = 34 // 최신 SDK 버전
    ndkVersion = "28.0.12433566" // 필요 여부 확인 (불필요하면 삭제)

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17" // Kotlin JVM Target 설정
    }

    defaultConfig {
        applicationId = "com.letelumiere.ffxiv"
        minSdk = 24
        targetSdk = 34
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
        multiDexEnabled true
    }

    buildFeatures {
        buildConfig = true
    }

    signingConfigs {
        release {
            storeFile file(keyProperties.getProperty("storeFile"))
            storePassword keyProperties.getProperty("storePassword")
            keyAlias keyProperties.getProperty("keyAlias")
            keyPassword keyProperties.getProperty("keyPassword")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            //minifyEnabled true // ProGuard 또는 R8 활성화
            //shrinkResources true // 사용되지 않는 리소스 제거
            //proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.all {
            it.enabled = false
            it.failFast = false
            it.ignoreFailures = true
        }
    }

    lint {
        checkReleaseBuilds = false
        abortOnError = false
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

flutter {
    source = "../.."
}

dependencies {
    // 최신 Kotlin 표준 라이브러리
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.23"

    // Firebase BOM 추가 (Firebase 라이브러리 버전 관리 통합)
    implementation platform('com.google.firebase:firebase-bom:32.1.1')
    implementation 'androidx.annotation:annotation:1.9.1'
    implementation 'androidx.multidex:multidex:2.0.1'

    // Firebase 관련 의존성
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-storage'
    implementation 'com.google.firebase:firebase-database'
}
